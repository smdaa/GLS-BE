/*
 * generated by Xtext 2.17.1
 */
package fr.enseeiht.serializer;

import com.google.inject.Inject;
import fr.enseeiht.gAME.Chemin;
import fr.enseeiht.gAME.Choix;
import fr.enseeiht.gAME.Condition;
import fr.enseeiht.gAME.Connaissance;
import fr.enseeiht.gAME.Description;
import fr.enseeiht.gAME.Echange;
import fr.enseeiht.gAME.Explorateur;
import fr.enseeiht.gAME.GAMEPackage;
import fr.enseeiht.gAME.Interaction;
import fr.enseeiht.gAME.Jeu;
import fr.enseeiht.gAME.Lieu;
import fr.enseeiht.gAME.Objet;
import fr.enseeiht.gAME.ObjetAvecQuantite;
import fr.enseeiht.gAME.Personne;
import fr.enseeiht.services.GAMEGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GAMESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GAMEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GAMEPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GAMEPackage.ACTION:
				sequence_Action(context, (fr.enseeiht.gAME.Action) semanticObject); 
				return; 
			case GAMEPackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case GAMEPackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case GAMEPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GAMEPackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case GAMEPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case GAMEPackage.ECHANGE:
				sequence_Echange(context, (Echange) semanticObject); 
				return; 
			case GAMEPackage.EXPLORATEUR:
				sequence_Explorateur(context, (Explorateur) semanticObject); 
				return; 
			case GAMEPackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case GAMEPackage.JEU:
				sequence_Jeu(context, (Jeu) semanticObject); 
				return; 
			case GAMEPackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case GAMEPackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case GAMEPackage.OBJET_AVEC_QUANTITE:
				sequence_ObjetAvecQuantite(context, (ObjetAvecQuantite) semanticObject); 
				return; 
			case GAMEPackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=ID descriptions+=Description conditions+=Condition* echanges+=Echange+)
	 */
	protected void sequence_Action(ISerializationContext context, fr.enseeiht.gAME.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         descriptions=Description? 
	 *         depart=[Lieu|ID] 
	 *         arrive=[Lieu|ID] 
	 *         visibilite=Visibilite 
	 *         conditionsVisibilite=Condition? 
	 *         ouverture=Ouverture 
	 *         conditionsOuverture=Condition?
	 *     )
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     (name=ID actions+=Action* conditions+=Condition*)
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (name=ID objets+=[Objet|ID]* objets+=[Objet|ID]* connaissances+=[Connaissance|ID]*)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (name=ID descriptions+=Description? visibilite=Visibilite conditionsVisibilite=Condition?)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.DESCRIPTION__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.DESCRIPTION__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getTextSTRINGTerminalRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Echange returns Echange
	 *
	 * Constraint:
	 *     (objetsDonne+=[Objet|ID]* objetsPris+=[Objet|ID]* connaissances+=[Connaissance|ID]* conditions+=Condition*)
	 */
	protected void sequence_Echange(ISerializationContext context, Echange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Explorateur returns Explorateur
	 *
	 * Constraint:
	 *     (name=ID taille=INT objets+=[ObjetAvecQuantite|ID]* connaissances+=[Connaissance|ID]* localisation=[Lieu|ID])
	 */
	protected void sequence_Explorateur(ISerializationContext context, Explorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (echanges+=Echange* choix+=Choix+)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Jeu returns Jeu
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         explorateur=Explorateur 
	 *         pointDepart=[Lieu|ID] 
	 *         pointFin+=[Lieu|ID]+ 
	 *         lieux+=Lieu* 
	 *         Objets+=Objet* 
	 *         ObjetAvecQuantite+=ObjetAvecQuantite* 
	 *         Connaissances+=Connaissance* 
	 *         personnes+=Personne* 
	 *         chemins+=Chemin*
	 *     )
	 */
	protected void sequence_Jeu(ISerializationContext context, Jeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         descriptions+=Description? 
	 *         objets+=[Objet|ID]* 
	 *         connaissances+=[Connaissance|ID]* 
	 *         personnes+=[Personne|ID]* 
	 *         cheminspossible+=[Chemin|ID]*
	 *     )
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjetAvecQuantite returns ObjetAvecQuantite
	 *
	 * Constraint:
	 *     (name=ID objet=[Objet|ID] quantite=INT)
	 */
	protected void sequence_ObjetAvecQuantite(ISerializationContext context, ObjetAvecQuantite semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.OBJET_AVEC_QUANTITE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.OBJET_AVEC_QUANTITE__NAME));
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.OBJET_AVEC_QUANTITE__OBJET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.OBJET_AVEC_QUANTITE__OBJET));
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.OBJET_AVEC_QUANTITE__QUANTITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.OBJET_AVEC_QUANTITE__QUANTITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjetAvecQuantiteAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjetAvecQuantiteAccess().getObjetObjetIDTerminalRuleCall_3_0_1(), semanticObject.eGet(GAMEPackage.Literals.OBJET_AVEC_QUANTITE__OBJET, false));
		feeder.accept(grammarAccess.getObjetAvecQuantiteAccess().getQuantiteINTTerminalRuleCall_5_0(), semanticObject.getQuantite());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (name=ID descriptions+=Description? taille=INT visibilite=Visibilite conditionsVisibilite=Condition?)
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         localisation=[Lieu|ID] 
	 *         descriptions=Description 
	 *         interaction=Interaction 
	 *         visibilite=Visibilite 
	 *         conditionsVisibilite=Condition?
	 *     )
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
